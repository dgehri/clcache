--- DependsExe.py	2024-09-04 23:22:11.070407000 +0200
+++ DependsExe_patched.py	2024-09-04 23:16:08.763328000 +0200
@@ -8,6 +8,7 @@
 """
 
 import os
+import subprocess
 
 from nuitka.containers.OrderedSets import OrderedSet
 from nuitka.Options import assumeYesForDownloads
@@ -198,7 +199,7 @@
     # but errors might be interesting potentially.
 
     with withEnvironmentVarOverridden("PATH", ""):
-        _stdout, _stderr, _exit_code = executeProcess(
+        executeProcessNoIO(
             command=(
                 depends_exe,
                 "-c",
@@ -209,7 +210,6 @@
                 "-ps1",
                 getExternalUsePath(binary_filename),
             ),
-            external_cwd=True,
         )
 
     if not os.path.exists(output_filename):
@@ -229,6 +229,33 @@
 
     return result
 
+def executeProcessNoIO(
+    command,
+    logger=None,
+):
+    if logger is not None:
+        logger.info("Executing command '%s'." % " ".join(command), keep_format=True)
+
+    try:
+        result = subprocess.run(
+            command,
+            stdout=subprocess.DEVNULL,  # Discard stdout
+            stderr=subprocess.DEVNULL,  # Discard stderr
+            cwd=getExternalUsePath(os.getcwd()) 
+        )
+
+        # Return the exit code
+        return result.returncode
+
+    except subprocess.TimeoutExpired as e:
+        if logger is not None:
+            logger.error(f"Command timed out: {e}")
+        return -1  # Return special exit code for timeout
+
+    except subprocess.SubprocessError as e:
+        if logger is not None:
+            logger.error(f"Error running command: {e}")
+        return -1  # Return special exit code for subprocess error
 
 #     Part of "Nuitka", an optimizing Python compiler that is compatible and
 #     integrates with CPython, but also works on its own.
